name: Tests

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

jobs:
  lint_test:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.64.8
          working-directory: .
          args: --timeout 10m --out-format=colored-line-number
          skip-pkg-cache: true
      - name: go mod tidy
        run: |
          go mod tidy
          git diff --exit-code

  unit_test:
    name: Golang Unit Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-22.04, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Set timeout on Windows # Windows UT run slower and need a longer timeout
        shell: bash
        if: matrix.os == 'windows-latest'
        run: echo "TIMEOUT=1200s" >> $GITHUB_ENV
      - run: go mod download
        shell: bash
      - run: ./scripts/build.sh ./build/subnetevm
        shell: bash
      - run: ./scripts/build_test.sh
        env:
          TIMEOUT: ${{ env.TIMEOUT }}
        shell: bash
      - run: ./scripts/coverage.sh
        shell: bash

  e2e_test:
    name: e2e tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.13"
      - name: NPM Clean Install
        run: npm ci
        working-directory: ./contracts
      - name: Hardhat Clean
        run: npx hardhat clean
        working-directory: ./contracts
      - name: Hardhat Compile
        run: npx hardhat compile
        working-directory: ./contracts
      - name: Install AvalancheGo Release
        shell: bash
        run: BASEDIR=/tmp/e2e-test AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/install_avalanchego_release.sh
      - name: Build Subnet-EVM Plugin Binary
        shell: bash
        run: ./scripts/build.sh /tmp/e2e-test/avalanchego/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy
      - name: Run E2E Tests
        shell: bash
        run: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego DATA_DIR=/tmp/e2e-test/data ./scripts/run_ginkgo.sh
      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: subnet-evm-e2e-logs-precompile
          path: /tmp/e2e-test/precompile-data
          retention-days: 5
