// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package verifyBLS

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	VerifySignatureBLSGasCost uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// VerifyBLSRawABI contains the raw ABI of VerifyBLS contract.
	//go:embed contract.abi
	VerifyBLSRawABI string

	VerifyBLSABI = contract.ParseABI(VerifyBLSRawABI)

	VerifyBLSPrecompile = createVerifyBLSPrecompile()
)

type VerifySignatureBLSInput struct {
	Message   string
	Signature []byte
	PublicKey []byte
}

// UnpackVerifySignatureBLSInput attempts to unpack [input] as VerifySignatureBLSInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackVerifySignatureBLSInput(input []byte) (VerifySignatureBLSInput, error) {
	inputStruct := VerifySignatureBLSInput{}
	err := VerifyBLSABI.UnpackInputIntoInterface(&inputStruct, "verifySignatureBLS", input, false)

	return inputStruct, err
}

// PackVerifySignatureBLS packs [inputStruct] of type VerifySignatureBLSInput into the appropriate arguments for verifySignatureBLS.
func PackVerifySignatureBLS(inputStruct VerifySignatureBLSInput) ([]byte, error) {
	return VerifyBLSABI.Pack("verifySignatureBLS", inputStruct.Message, inputStruct.Signature, inputStruct.PublicKey)
}

// PackVerifySignatureBLSOutput attempts to pack given result of type bool
// to conform the ABI outputs.
func PackVerifySignatureBLSOutput(result bool) ([]byte, error) {
	return VerifyBLSABI.PackOutput("verifySignatureBLS", result)
}

// UnpackVerifySignatureBLSOutput attempts to unpack given [output] into the bool type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackVerifySignatureBLSOutput(output []byte) (bool, error) {
	res, err := VerifyBLSABI.Unpack("verifySignatureBLS", output)
	if err != nil {
		return false, err
	}
	unpacked := *abi.ConvertType(res[0], new(bool)).(*bool)
	return unpacked, nil
}

func verifySignatureBLS(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, VerifySignatureBLSGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the VerifySignatureBLSInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackVerifySignatureBLSInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output bool // CUSTOM CODE FOR AN OUTPUT
	bls
	packedOutput, err := PackVerifySignatureBLSOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createVerifyBLSPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createVerifyBLSPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"verifySignatureBLS": verifySignatureBLS,
	}

	for name, function := range abiFunctionMap {
		method, ok := VerifyBLSABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
